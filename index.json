[
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.1-create-spoke-vpcs/",
	"title": "Create Spoke VPCs (Production &amp; Development)",
	"tags": [],
	"description": "",
	"content": "Step 1: Create Production VPC 1.1 Create Production VPC In the VPC Console, select Your VPCs Click Create VPC 3. Configure:\nName tag: Production-VPC\rIPv4 CIDR block: 10.1.0.0/16\rIPv6 CIDR block: No IPv6 CIDR block\rTenancy: Default Click Create VPC 1.2 Enable DNS Settings Select Production VPC 2. Click Actions ‚Üí Edit VPC settings 3. Enable:\nEnable DNS resolution Enable DNS hostnames 4. Click Save\n1.3 Create Production Subnets Private Application Subnets Name: Prod-App-Subnet-1a\rVPC: Production-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.1.1.0/24 Name: Prod-App-Subnet-1b\rVPC: Production-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.1.2.0/24 Private Database Subnets Name: Prod-DB-Subnet-1a\rVPC: Production-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.1.11.0/24 Name: Prod-DB-Subnet-1b\rVPC: Production-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.1.12.0/24 Transit Gateway Subnets Name: Prod-TGW-Subnet-1a\rVPC: Production-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.1.21.0/24 Name: Prod-TGW-Subnet-1b\rVPC: Production-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.1.22.0/24 Step 2: Create Development VPC 2.1 Create Development VPC Name tag: Development-VPC\rIPv4 CIDR block: 10.2.0.0/16\rIPv6 CIDR block: No IPv6 CIDR block\rTenancy: Default 2.2 Create Development Subnets Private Application Subnets Name: Dev-App-Subnet-1a\rVPC: Development-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.2.1.0/24 Name: Dev-App-Subnet-1b\rVPC: Development-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.2.2.0/24 Private Database Subnets Name: Dev-DB-Subnet-1a\rVPC: Development-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.2.11.0/24 Name: Dev-DB-Subnet-1b\rVPC: Development-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.2.12.0/24 Transit Gateway Subnets Name: Dev-TGW-Subnet-1a\rVPC: Development-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.2.21.0/24 Name: Dev-TGW-Subnet-1b\rVPC: Development-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.2.22.0/24 "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.1-create-transit-gateway/",
	"title": "Create a Transit Gateway",
	"tags": [],
	"description": "",
	"content": "1.1. Access AWS Console Log in to the AWS Management Console. Select the Asia Pacific (Singapore) ap-southeast-1 Region. 3. In the search bar, type VPC and select the VPC service.\n4. In the left navigation pane, select Transit Gateways.\n1.2. Configure and Create Transit Gateway Click the Create Transit Gateway button. 2. Fill in the configuration parameters as follows:\nParameter Value Notes Name tag Hub-TGW A name to easily identify the Transit Gateway. Description Transit Gateway for the central hub A description of the Transit Gateway\u0026rsquo;s purpose. Amazon side ASN 64512 The Autonomous System Number (ASN) for the Amazon side. You can leave the default. DNS support Enable Allows DNS resolution between VPCs. VPN ECMP support Enable Enables Equal-Cost Multi-Path routing for VPN connections. Default route table association Enable Automatically associates new attachments with the default route table. Default route table propagation Enable Automatically propagates routes from new attachments to the default route table. Multicast support Disable Disable if you do not need to use multicast. Auto accept shared attachments Enable Automatically accepts attachments shared from other accounts. 3. Click Create Transit Gateway.\nThe Transit Gateway creation process can take 10‚Äì15 minutes to complete. The status will change from pending to available.\n"
},
{
	"uri": "http://localhost:1313/",
	"title": "Advanced VPC Network Architecture with Transit Gateway Workshop",
	"tags": [],
	"description": "",
	"content": "Advanced VPC Network Architecture with Transit Gateway Workshop Overview In this workshop, you will learn how to design and implement an advanced multi-VPC network architecture using AWS Transit Gateway in a hub-and-spoke model. The workshop will guide you through building a scalable, secure, and efficient network for an enterprise environment.\nWorkshop Objectives Design an enterprise-grade network architecture with AWS Transit Gateway Implement a hub-and-spoke model to optimize connectivity Configure multi-layer security with Security Groups and NACLs Optimize costs through shared services Monitor and troubleshoot network performance Key Components 1. Hub VPC (Central Hub) Shared Services: NAT Gateway, DNS, Active Directory Security Services: Firewall, IDS/IPS, Security monitoring Management Services: Bastion hosts, monitoring tools Connectivity: VPN Gateway, Direct Connect Gateway 2. Spoke VPCs (Branches) Production VPC: Production environment with high availability Development VPC: Development and testing environment Staging VPC: Pre-production environment DMZ VPC: Demilitarized zone for public-facing services 3. Transit Gateway Route Tables: Control traffic flow between VPCs Attachments: Connections to VPC, VPN, Direct Connect Route Propagation: Automatic route learning and distribution Workshop Content Introduction and Architecture Transit Gateway Setup Hub VPC Overview Create Spoke VPCs (Production \u0026amp; Development) Configure Routing and Security Testing and Monitoring Resource Cleanup Architectural Benefits 1. Connection Optimization Reduces connections from O(n¬≤) to O(n) Simplified network topology Centralized routing control 2. Enhanced Security Network Segmentation: Environment isolation Centralized Security: Apply security policies from the hub Traffic Inspection: Centralized traffic control and monitoring 3. Efficient Management Single Point of Control: Manage routing from one place Shared Services: Optimize costs and resources Scalability: Easy addition/removal of spoke VPCs 4. Cost Optimization Share NAT Gateway and common services Reduce data transfer costs Optimize bandwidth utilization Estimated Time Total time: 6-8 hours Level: Intermediate to Advanced Estimated cost: ~$15-20 for the complete workshop Prerequisites AWS Account AWS Account with admin permissions AWS CLI configured Region: Asia Pacific (Singapore) - ap-southeast-1 Required Knowledge Basic understanding of AWS VPC Experience with EC2 and networking Familiarity with the AWS Console Required Tools AWS CLI SSH client Text editor Web browser Estimated Costs Service Cost/Month Workshop (4 days) Transit Gateway $36.00 $4.80 NAT Gateway $45.00 $6.00 VPC Endpoints $7.20 $0.96 EC2 Instances $7.50 $1.00 Total $95.70 ~$12.76 ‚ö†Ô∏è Important Notes The workshop will incur real AWS costs Monitor costs via AWS Cost Explorer Cleanup is mandatory after completion Do not use a production account Use an IAM user with minimum necessary permissions Expected Outcomes After completing this workshop, you will have:\nA complete network architecture with detailed documentation A security framework ensuring multi-layered security Performance benchmarks and optimization guidelines A cost analysis with recommendations Operational procedures for troubleshooting and DR Best practices for enterprise network design üöÄ Happy learning with the Advanced VPC Network Architecture Workshop! üåê "
},
{
	"uri": "http://localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Complex Multi-VPC Architecture with Transit Gateway In the modern enterprise landscape, building a complex and scalable cloud network architecture is an essential requirement. This project focuses on designing and implementing an advanced multi-VPC architecture using AWS Transit Gateway, applying the hub-and-spoke model to optimize network connectivity and centralized management.\nContext and Importance Traditional Network Architecture Challenges Connection Complexity: VPC peering creates complex network mesh (n*(n-1)/2 connections) Management Difficulty: Distributed routing tables, difficult traffic flow control Scalability Limitations: Limited number of peering connections Distributed Security: Difficult to apply consistent security policies Transit Gateway Hub-and-Spoke Solution Transit Gateway acts as a central \u0026ldquo;cloud router,\u0026rdquo; enabling:\nSimplified connectivity between VPCs Centralized routing management Efficient shared service utilization Consistent security policy application Core Architecture Components 1. Hub VPC (Central Hub) Shared Services: NAT Gateway, DNS, Active Directory Security Services: Firewall, IDS/IPS, Security monitoring Management Services: Bastion hosts, monitoring tools Connectivity: VPN Gateway, Direct Connect Gateway 2. Spoke VPCs (Branches) Production VPC: Production environment with high availability Development VPC: Development and testing environment Staging VPC: Pre-production environment DMZ VPC: Demilitarized zone for public-facing services 3. Transit Gateway Route Tables: Control traffic flow between VPCs Attachments: Connections to VPC, VPN, Direct Connect Route Propagation: Automatic route learning and distribution Architecture Benefits 1. Connection Optimization Reduce from O(n¬≤) to O(n) connections Simplified network topology Centralized routing control 2. Enhanced Security Network Segmentation: Environment isolation Centralized Security: Apply security policies from hub Traffic Inspection: Centralized traffic control and monitoring 3. Efficient Management Single Point of Control: Manage routing from one point Shared Services: Optimize costs and resources Scalability: Easy addition/removal of spoke VPCs 4. Cost Optimization Share NAT Gateway and common services Reduce data transfer costs Optimize bandwidth utilization Research Scope 1. Network Design \u0026amp; Documentation Detailed network topology diagrams IP addressing scheme (CIDR planning) Subnet design and availability zones DNS resolution strategy 2. Advanced Routing Implementation Route table optimization Traffic engineering Load balancing strategies Failover mechanisms 3. Multi-layered Security Security Groups configuration Network ACLs implementation VPC Flow Logs analysis Security monitoring and alerting 4. Performance \u0026amp; Optimization Bandwidth testing and monitoring Latency optimization Throughput analysis Performance benchmarking 5. Cost Management Resource utilization analysis Cost optimization strategies Reserved capacity planning Billing optimization 6. Operational Excellence Troubleshooting procedures Monitoring and alerting setup Disaster recovery planning Business continuity strategies Technologies and Services Used AWS Core Services AWS Transit Gateway: Central routing hub Amazon VPC: Virtual private clouds AWS Direct Connect: Dedicated network connection AWS VPN: Site-to-site VPN connections Security Services AWS Security Groups: Instance-level firewall Network ACLs: Subnet-level security AWS WAF: Web application firewall AWS Shield: DDoS protection Monitoring \u0026amp; Management Amazon CloudWatch: Monitoring and metrics AWS CloudTrail: API logging VPC Flow Logs: Network traffic analysis AWS Config: Configuration compliance Expected Outcomes Upon project completion, we will have:\nComplete network architecture with detailed documentation Security framework ensuring multi-layered security Performance benchmarks and optimization guidelines Cost analysis with recommendations Operational procedures for troubleshooting and DR Best practices for enterprise network design This project provides not only a technical solution but also a comprehensive framework for designing and operating enterprise-level cloud network architecture.\n"
},
{
	"uri": "http://localhost:1313/5-routing-security/5.1-advanced-transit-gateway-routing/",
	"title": "Advanced Transit Gateway Routing",
	"tags": [],
	"description": "",
	"content": "In this section, we will configure the core components of routing within the Transit Gateway to establish the foundation for our network architecture.\nOverview of Advanced Routing Advanced routing in Transit Gateway allows for:\nDetailed traffic control between VPCs Security segmentation by environment Traffic inspection and monitoring Conditional routing based on source/destination 1.1 Create Dedicated Route Tables We begin by creating separate route tables for different purposes, allowing for granular control over traffic flow.\nSecurity Route Table This route table will be used for inspecting traffic that passes through security appliances.\nName: Security-Route-Table\rDescription: Route table for security inspection\rTransit Gateway: Enterprise-TGW Inspection Route Table This route table is intended for traffic inspection and monitoring.\nName: Inspection-Route-Table\rDescription: Route table for traffic inspection\rTransit Gateway: Enterprise-TGW 1.2 Configure the Hub Route Table The Hub VPC\u0026rsquo;s route table will direct traffic to the Spoke VPCs and to the internet.\nSelect Hub-Route-Table Click the Routes tab Click Create route Add the following routes: Routes:\r- 10.1.0.0/16 ‚Üí Production VPC Attachment\r- 10.2.0.0/16 ‚Üí Development VPC Attachment\r- 0.0.0.0/0 ‚Üí Hub VPC Attachment (for internet access) 1.3 Configure the Spoke Route Table The Spoke VPCs\u0026rsquo; route table will direct all traffic to the Hub VPC for centralized processing.\nSelect Spoke-Route-Table Add the following routes: Routes:\r- 0.0.0.0/0 ‚Üí Hub VPC Attachment (internet via Hub NAT)\r- 10.0.0.0/16 ‚Üí Hub VPC Attachment (shared services) 1.4 Implement Route Propagation Enable route propagation so that Spoke VPCs can automatically learn routes from the Hub.\n# Enable route propagation for the Hub route table aws ec2 create-transit-gateway-route-table-propagation \\ --transit-gateway-attachment-id tgw-attach-xxxxxxxxx \\ --transit-gateway-route-table-id tgw-rtb-xxxxxxxxx In this section, we will configure the core components of routing within the Transit Gateway to establish the foundation for our network architecture.\r### 1.1 Create Dedicated Route Tables\rWe begin by creating separate route tables for different purposes, allowing for granular control over traffic flow.\r#### Security Route Table\rThis route table will be used for inspecting traffic that passes through security appliances. Name: Security-Route-Table Description: Route table for security inspection Transit Gateway: Enterprise-TGW\n![](/images/5.routing-security/hinh-1.png)\r#### Inspection Route Table\rThis route table is intended for traffic inspection and monitoring. Name: Inspection-Route-Table Description: Route table for traffic inspection Transit Gateway: Enterprise-TGW\n![](/images/5.routing-security/hinh-2.png)\r### 1.2 Configure the Hub Route Table\rThe Hub VPC\u0026#39;s route table will direct traffic to the Spoke VPCs and to the internet.\r1. Select **Hub-Route-Table**\r2. Click the **Routes** tab\r3. Click **Create route**\r4. Add the following routes: Routes:\n10.1.0.0/16 ‚Üí Production VPC Attachment 10.2.0.0/16 ‚Üí Development VPC Attachment 0.0.0.0/0 ‚Üí Hub VPC Attachment (for internet access) ### 1.3 Configure the Spoke Route Table\rThe Spoke VPCs\u0026#39; route table will direct all traffic to the Hub VPC for centralized processing.\r1. Select **Spoke-Route-Table**\r2. Add the following routes: Routes:\n0.0.0.0/0 ‚Üí Hub VPC Attachment (internet via Hub NAT) 10.0.0.0/16 ‚Üí Hub VPC Attachment (shared services) ### 1.4 Implement Route Propagation\rEnable route propagation so that Spoke VPCs can automatically learn routes from the Hub.\r```bash\r# Enable route propagation for the Hub route table\raws ec2 create-transit-gateway-route-table-propagation \\\r--transit-gateway-attachment-id tgw-attach-xxxxxxxxx \\\r--transit-gateway-route-table-id tgw-rtb-xxxxxxxxx "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.1-connection-testing/6.1.1-basic-connection-testing/",
	"title": "Basic Connection Testing",
	"tags": [],
	"description": "",
	"content": "1.1 Basic Connection Testing These tests are performed from the Hub VPC\u0026rsquo;s Bastion Host to verify basic network connectivity between VPCs and the Internet.\nNote:\nReplace placeholder IP addresses (10.1.1.10, 10.2.1.10, etc.) with the actual private IPs of instances in your Production and Development VPCs. Ensure tools like ping, ssh, curl, and nc (netcat) are installed on the Bastion Host and target instances if needed. If using ssh to run commands on target instances, ensure the corresponding SSH key (.pem file) has been copied to the Bastion Host and has appropriate permissions (chmod 400). Tests and Expected Results: Hub to Production/Development Connectivity Test (using ping):\nCommand: ping -c 3 \u0026lt;IP_instance_Production\u0026gt; and ping -c 3 \u0026lt;IP_instance_Development\u0026gt; Expected Result: SUCCESS (0% packet loss). This confirms basic connectivity between the Hub and spoke VPCs. Production to Development Isolation Test (using ssh and ping):\nCommand: ssh -o ConnectTimeout=5 ec2-user@\u0026lt;IP_instance_Production\u0026gt; \u0026quot;ping -c 1 \u0026lt;IP_instance_Development\u0026gt;\u0026quot; Expected Result: SUCCESS (100% packet loss for ping inside). This confirms that traffic between Production and Development is blocked, ensuring isolation as designed. Internet Connectivity Test from Spoke VPCs (using ssh and curl):\nCommand: ssh -i \u0026lt;Path_to_your_SSH_Key.pem\u0026gt; ec2-user@\u0026lt;IP_Production_Instance_AZ1a\u0026gt; \u0026quot;curl -s --connect-timeout 5 http://google.com\u0026quot; and similarly for Development. Expected Result: SUCCESS (returns a short HTML code). This confirms that instances in spoke VPCs can access the Internet via the Hub VPC\u0026rsquo;s NAT Gateway. "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.5-monitoring-setup/6.5.1-cloudwatch-dashboard/",
	"title": "CloudWatch Dashboard",
	"tags": [],
	"description": "",
	"content": "5.1 CloudWatch Dashboard Explanation: CloudWatch Dashboards provide a centralized, comprehensive view of your resources and applications. By creating custom dashboards, you can visualize important metrics from various AWS services (such as EC2, Transit Gateway, VPC Flow Logs) on a single screen. This helps you quickly monitor performance, detect issues, and make data-driven decisions in real-time. Having a comprehensive monitoring dashboard is crucial for maintaining the stability and performance of your hub-and-spoke network architecture.\nCreating Custom Dashboards (Manual) YouCan create CloudWatch dashboards via the AWS console or using the AWS CLI. Below is an example of a JSON configuration for a custom dashboard, focusing on Transit Gateway traffic and Instance network traffic.\nImportant Notes:\nReplace tgw-xxxxxxxxx with your actual Transit Gateway ID. Replace i-prod-xxxxxxxxx and i-dev-xxxxxxxxx with your actual Production and Development instance IDs. ap-southeast-1 is an example region; replace it with your AWS region. 1. Create a JSON file for the dashboard:\nCreate a new file named dashboard.json on your computer (or Bastion Host) and paste the following content: { \u0026#34;widgets\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;metric\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;metrics\u0026#34;: [ [ \u0026#34;AWS/TransitGateway\u0026#34;, \u0026#34;BytesIn\u0026#34;, \u0026#34;TransitGateway\u0026#34;, \u0026#34;tgw-xxxxxxxxx\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;BytesOut\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;PacketsIn\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;PacketsOut\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34; ] ], \u0026#34;period\u0026#34;: 300, \u0026#34;stat\u0026#34;: \u0026#34;Sum\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;ap-southeast-1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Transit Gateway Traffic\u0026#34; } }, { \u0026#34;type\u0026#34;: \u0026#34;metric\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;metrics\u0026#34;: [ [ \u0026#34;AWS/EC2\u0026#34;, \u0026#34;NetworkIn\u0026#34;, \u0026#34;InstanceId\u0026#34;, \u0026#34;i-prod-xxxxxxxxx\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;NetworkOut\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;NetworkIn\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;i-dev-xxxxxxxxx\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;NetworkOut\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;.\u0026#34; ] ], \u0026#34;period\u0026#34;: 300, \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;ap-southeast-1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Instance Network Traffic\u0026#34; } } ] } 2. Deploy the Dashboard using AWS CLI:\nAfter creating the dashboard.json file, run the following command to create the dashboard in CloudWatch:\naws cloudwatch put-dashboard \\ --dashboard-name \u0026#34;VPC-Architecture-Monitoring\u0026#34; \\ --dashboard-body file://dashboard.json Expected Result: The command will return a JSON response confirming the dashboard has been successfully created or updated. You can check this dashboard in the AWS CloudWatch console. "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.1-connection-testing/",
	"title": "Connection Testing",
	"tags": [],
	"description": "",
	"content": "Testing Strategy Overview Comprehensive testing includes:\nConnectivity Testing: Verifying network paths Performance Testing: Measuring latency and throughput Security Testing: Validating security controls Failover Testing: Testing high availability Load Testing: Stress testing the architecture Step 1: Connection Testing Connection testing is the first and most crucial step to ensure that all components in your hub-and-spoke architecture can communicate with each other correctly. This includes verifying basic connectivity, advanced connectivity to specific ports, and DNS resolution capabilities.\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.2-performance-testing/6.2.1-network-latency-testing/",
	"title": "Network Latency Testing",
	"tags": [],
	"description": "",
	"content": "2.1 Network Latency Testing This section measures the latency between your Bastion Host and different points in the network. These tests are performed from the Hub VPC\u0026rsquo;s Bastion Host.\nNote:\nReplace placeholder IP addresses (10.1.1.10, 10.1.2.10, 10.0.1.10) with the actual private IPs of the corresponding instances. 10.1.1.10 is the IP of the Production instance (same AZ). 10.1.2.10 is the IP of the Production instance in a different AZ (or Development instance if no multi-AZ Prod). 10.0.1.10 is the IP of an instance/resource in the Hub VPC. Tests and Expected Results: Latency test within the same AZ (or to Production VPC):\nCommand: ping -c 10 \u0026lt;IP_instance_Production\u0026gt; Expected Result: Very low latency (under 1ms or a few ms). Latency test between AZs (within Production VPC):\nCommand: ping -c 10 \u0026lt;IP_instance_Production_different_AZ\u0026gt; * Expected Result: Low latency (a few ms), slightly higher than within the same AZ.\nLatency test to Hub VPC: Command: ping -c 10 \u0026lt;IP_instance_Hub\u0026gt; * Expected Result: Very low latency (under 1ms or a few ms).\nLatency test to the internet: Command: ping -c 10 8.8.8.8 * Expected Result: Significantly higher latency (tens to hundreds of ms). Note: Your actual latency (~0.9ms) is extremely low and indicates excellent network performance.\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.3-security-testing/6.3.1-security-group-testing/",
	"title": "Security Group Testing",
	"tags": [],
	"description": "",
	"content": "3.1 Security Group Testing Manually test blocked ports To manually test each port from within the Production Instance (after SSHing from the Bastion Host), you can use the following commands:\nNote: Replace 10.1.1.10 with the actual IP of the instance you are testing.\nTest RDP port (3389): nc -zv 10.1.1.10 3389 Test SQL Server port (1433): nc -zv 10.1.1.10 1433 Test PostgreSQL port (5432): nc -zv 10.1.1.10 5432 Test Telnet port (23): nc -zv 10.1.1.10 23 "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.2-configure-route-tables/",
	"title": "Configure Route Tables for Production VPC",
	"tags": [],
	"description": "",
	"content": "Step 3: Configure Route Tables for Production VPC 3.1 Application Route Table Select Route Tables Click Create Route Table Configure: Name: Prod-App-RT\rVPC: Production-VPC 4. Edit routes:\nRoutes:\r- 10.1.0.0/16 ‚Üí local (auto-created)\r- 0.0.0.0/0 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.0.0.0/16 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.2.0.0/16 ‚Üí Transit Gateway (to be added in Step 8) Routes to the Transit Gateway will be added in Step 8 after the VPC is attached to the Transit Gateway. When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\nAssociate subnets: Prod-App-Subnet-1a Prod-App-Subnet-1b 3.2 Database Route Table Name: Prod-DB-RT\rVPC: Production-VPC\rRoutes:\r- 10.1.0.0/16 ‚Üí local (auto-created)\r- 10.0.0.0/16 ‚Üí Transit Gateway (to be added in Step 8) Routes to the Transit Gateway will be added in Step 8 after the VPC is attached to the Transit Gateway. When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\nSubnet Associations:\nProd-DB-Subnet-1a Prod-DB-Subnet-1b 3.3 Transit Gateway Route Table Name: Prod-TGW-RT\rVPC: Production-VPC\rRoutes:\r- 10.1.0.0/16 ‚Üí local (auto-created)\r- 0.0.0.0/0 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.0.0.0/16 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.2.0.0/16 ‚Üí Transit Gateway (to be added in Step 8) Routes to the Transit Gateway will be added in Step 8 after the VPC is attached to the Transit Gateway. When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\nSubnet Associations:\nProd-TGW-Subnet-1a Prod-TGW-Subnet-1b Step 4: Configure Route Tables for Development VPC 4.1 Application Route Table Name: Dev-App-RT\rVPC: Development-VPC\rRoutes:\r- 10.2.0.0/16 ‚Üí local (auto-created)\r- 0.0.0.0/0 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.0.0.0/16 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.1.0.0/16 ‚Üí Transit Gateway (to be added in Step 8) Routes to the Transit Gateway will be added in Step 8 after the VPC is attached to the Transit Gateway. When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\nSubnet Associations:\nDev-App-Subnet-1a Dev-App-Subnet-1b 4.2 Database Route Table Name: Dev-DB-RT\rVPC: Development-VPC\rRoutes:\r- 10.2.0.0/16 ‚Üí local (auto-created)\r- 10.0.0.0/16 ‚Üí Transit Gateway (to be added in Step 8) Routes to the Transit Gateway will be added in Step 8 after the VPC is attached to the Transit Gateway. When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\nSubnet Associations:\nDev-DB-Subnet-1a Dev-DB-Subnet-1b 4.3 Transit Gateway Route Table Name: Dev-TGW-RT\rVPC: Development-VPC\rRoutes:\r- 10.2.0.0/16 ‚Üí local (auto-created)\r- 0.0.0.0/0 ‚Üí Transit Gateway (to be added in Step 8)\r- 10.0.0.0/16 ‚Üí Transit Gateway (to be added in Step 8) Routes to the Transit Gateway will be added in Step 8 after the VPC is attached to the Transit Gateway. When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\nSubnet Associations:\nDev-TGW-Subnet-1a Dev-TGW-Subnet-1b "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/",
	"title": "AWS Transit Gateway Setup Guide",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will create and configure the AWS Transit Gateway ‚Äì the central component of our hub-and-spoke architecture.\nTransit Gateway Overview AWS Transit Gateway is a service that enables you to connect your VPCs and on-premises networks through a central hub. This simplifies your network and eliminates complex peering relationships.\nKey Benefits: Simplified Connectivity: Connect multiple VPCs through a single central point. Scalability: Supports thousands of VPC attachments. Centralized Routing: Manage routing from a single place. Inter-Region Peering: Connect Transit Gateways in different AWS regions. Sections in this chapter: Step 1: Create Transit Gateway Step 2: Create Route Tables Step 3: Configure Default Route Table Step 4: Verify Configuration Step 5: Cost Optimization and Troubleshooting Step 6: Advanced Topic: Resource Sharing Step 7: Next Steps "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.2-create-route-tables/",
	"title": "Create Custom Route Tables",
	"tags": [],
	"description": "",
	"content": "To better control traffic flow, we will create custom route tables instead of using the default table.\n2.1. Create a Route Table for the Hub In the VPC Console, in the left menu, select Transit Gateway Route Tables. 2. Click Create Transit Gateway Route Table.\nConfiguration: Parameter Value Name tag Hub-Route-Table Transit Gateway ID Select the Hub-TGW created in Step 1. 4. Click Create Transit Gateway Route Table.\n2.2. Create a Route Table for the Spoke Click Create Transit Gateway Route Table again. Configuration: Parameter Value Name tag Spoke-Route-Table Transit Gateway ID Select Hub-TGW. 3. Click Create Transit Gateway Route Table.\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.1-connection-testing/6.1.2-advanced-connection-testing/",
	"title": "Advanced Connection Testing",
	"tags": [],
	"description": "",
	"content": "1.2 Advanced Connection Testing This section tests connectivity to specific ports, performed from the Hub VPC\u0026rsquo;s Bastion Host.\nNote:\nReplace placeholder IP addresses (10.1.1.10, 10.2.1.10, 10.1.11.10) with the actual private IPs of the corresponding instances. Ensure the nc (netcat) tool is installed on the Bastion Host. Tests and Expected Results: SSH access test (port 22): Command: nc -zv \u0026lt;IP_instance_Production\u0026gt; 22 and nc -zv \u0026lt;IP_instance_Development\u0026gt; 22 * Expected Result: SUCCESS. The Bastion Host is allowed to SSH into internal instances.\nHTTP/HTTPS test (ports 80/443): Command: nc -zv \u0026lt;IP_instance_Production\u0026gt; 80 and nc -zv \u0026lt;IP_instance_Production\u0026gt; 443 * Expected Result: Can be SUCCESS or FAILURE (timeout/connection refused). It will usually FAIL if the instance\u0026rsquo;s Security Group only allows access from the Load Balancer, which is a good security configuration.\nDatabase port tests (ports 3306/5432): Command: nc -zv \u0026lt;IP_instance_DB_Production\u0026gt; 3306 and nc -zv \u0026lt;IP_instance_DB_Production\u0026gt; 5432 * Expected Result: FAILURE (timeout/connection refused). Database ports should be blocked from direct access from the Bastion Host for security, they should only be accessed from the application layer.\nVPC Endpoints test (port 443): Command: nc -zv s3.ap-southeast-1.amazonaws.com 443 and nc -zv ec2.ap-southeast-1.amazonaws.com 443 * Expected Result: SUCCESS. Confirms VPC Endpoint is working, allowing access to AWS services without going over the internet.\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.2-performance-testing/6.2.2-bandwidth-testing/",
	"title": "Bandwidth Testing",
	"tags": [],
	"description": "",
	"content": "2.2 Bandwidth Testing This section uses iperf3 to measure network throughput between different points. iperf3 operates in a client-server model.\nImportant Notes:\nInstall iperf3: Ensure iperf3 is installed on all instances participating in the test (e.g., Bastion Host, Production instance, Development instance). On Amazon Linux/CentOS/RHEL sudo yum update -y sudo yum install -y iperf3 On Ubuntu/Debian sudo apt update sudo apt install -y iperf3 Security Group Configuration: Ensure the Security Group of the instance acting as the server (iperf3 -s) allows TCP traffic on port 5201 from the instance acting as the client (iperf3 -c). Stop iperf3 server: After testing, remember to stop iperf3 server processes using sudo killall iperf3 or ps aux | grep iperf3 then sudo kill \u0026lt;PID\u0026gt;. Tests and Instructions: Start iperf3 Server on the target instance: SSH into the target instance (e.g., Production instance 10.1.1.10, Development instance 10.2.1.10). Run command: iperf3 -s -D (run server in daemon mode). 2. Test bandwidth from Hub to Production: * From Bastion Host: bash\riperf3 -c \u0026lt;IP_instance_Production\u0026gt; -t 30 -P 4\r* Expected Result: Displays throughput (e.g., Gbits/sec, Mbits/sec). If the connection fails (0.00 Bytes), recheck the iperf3 server and Security Group.\nTest bandwidth from Production to Development (if allowed): Start iperf3 Server on the Development instance. From Bastion Host, SSH into the Production instance and run the client command: ssh -i ~/.ssh/Prod-Test-Instance-Key.pem ec2-user@\u0026lt;IP_instance_Production\u0026gt; \u0026#34;iperf3 -c \u0026lt;IP_instance_Development\u0026gt; -t 30\u0026#34; * Expected Result: Displays throughput. If there is isolation between Prod and Dev, this command may fail (timeout/connection refused), which is the expected result for security.\nTest bandwidth to the internet (via NAT Gateway): From Bastion Host: iperf3 -c iperf.he.net -t 30 * Expected Result: Displays throughput to the Internet. (Note: iperf.he.net is a public server).\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.3-security-testing/6.3.2-network-acl-testing/",
	"title": "Network ACL Testing",
	"tags": [],
	"description": "",
	"content": "3.2 Network ACL Testing Network ACLs (NACLs) act as a stateless firewall at the subnet level, providing an additional layer of security for your VPC. Testing NACLs is essential to ensure they are enforcing inbound and outbound traffic rules as designed, especially in isolating different environments (e.g., Production and Development) and controlling data flow between subnets. This helps prevent unauthorized access and limits the scope of security incidents.\nManually Test Network ACLs To test Network ACLs, you will run the following commands from your Bastion Host. Replace placeholder IP addresses with the actual IPs of your instances.\nNote: Ensure the corresponding SSH key (.pem file) has been copied to the Bastion Host and has appropriate permissions (chmod 400).\n1. Test Production and Development isolation:\nCommand: ssh -i ~/.ssh/your-key.pem ec2-user@\u0026lt;IP_Production_Instance\u0026gt; \u0026#34;timeout 5 nc -zv \u0026lt;IP_Development_Instance\u0026gt; 22\u0026#34; (Run this command from the Bastion Host. It will SSH into the Production Instance and from there attempt to connect to the Development Instance via port 22. The expected result is the command hanging or timing out, indicating the connection is blocked.)\n2. Test Hub can reach Production:\nCommand: timeout 5 nc -zv \u0026lt;IP_Production_Instance\u0026gt; 22 (Run this command from the Bastion Host. The expected result is a successful connection.)\n3. Test Hub can reach Development:\nCommand: timeout 5 nc -zv \u0026lt;IP_Development_Instance\u0026gt; 22 (Run this command from the Bastion Host. The expected result is a successful connection.)\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.2-performance-testing/",
	"title": "Performance Testing",
	"tags": [],
	"description": "",
	"content": "Step 2: Performance Testing Performance testing is crucial to evaluate the ability of the hub-and-spoke network architecture to handle traffic and maintain low latency. These tests help identify potential bottlenecks and ensure that the system can meet performance requirements.\n"
},
{
	"uri": "http://localhost:1313/5-routing-security/5.2-traffic-segmentation/",
	"title": "Traffic Segmentation",
	"tags": [],
	"description": "",
	"content": "Traffic segmentation is a critical security measure to isolate environments and control communication between them.\nNote on an Advanced Security Layer: AWS Network Firewall\nIn addition to using Security Groups and Network ACLs, in production environments with high-security requirements, AWS Network Firewall is often deployed in the Hub VPC. This is a managed firewall service that allows you to implement detailed filtering rules for all traffic passing through the Transit Gateway.\nKey Benefits:\nCentralized Traffic Inspection and Filtering: Instead of managing complex rules across multiple NACLs, you can define security policies in a single place. Enhanced Protection: Provides capabilities like Intrusion Prevention (IPS), web filtering, and traffic inspection based on more complex rules. In our architecture, the AWS Network Firewall would be placed in the Hub VPC, and all traffic from the Spoke VPCs would be routed through it before going to the internet or other VPCs.\n2.1 Isolate Production-Development To prevent direct communication between the Production and Development environments, we create separate route tables.\nCreate Prod-Only-Route-Table: Routes:\r- 10.0.0.0/16 ‚Üí Hub VPC (shared services only)\r- 0.0.0.0/0 ‚Üí Hub VPC (internet access)\r# NO route to 10.2.0.0/16 (Development) Create Dev-Only-Route-Table: Routes:\r- 10.0.0.0/16 ‚Üí Hub VPC (shared services only)\r- 0.0.0.0/0 ‚Üí Hub VPC (internet access)\r# NO route to 10.1.0.0/16 (Production) Re-associate the VPC attachments: Production VPC ‚Üí Prod-Only-Route-Table Development VPC ‚Üí Dev-Only-Route-Table 2.2 Conditional Routing Implement conditional routing based on the source to control access to specific services.\n# Route from Production to specific services only aws ec2 create-route \\ --route-table-id tgw-rtb-prod \\ --destination-cidr-block 10.0.10.0/24 \\ --transit-gateway-attachment-id tgw-attach-hub "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.3-attach-to-transit-gateway/",
	"title": "Attach Spoke VPCs to Transit Gateway",
	"tags": [],
	"description": "",
	"content": "Step 5: Attach Spoke VPCs to Transit Gateway 5.1 Attach Production VPC V√†o VPC Console, ch·ªçn Transit Gateway Attachments\nClick Create Transit Gateway Attachment\nC·∫•u h√¨nh nh∆∞ sau:\nName tag: Prod-VPC-TGW-Attachment Transit Gateway ID: Hub-TGW Attachment type: VPC VPC ID: Production-VPC Subnet IDs: - Prod-TGW-Subnet-1a - Prod-TGW-Subnet-1b Click Create Transit Gateway Attachment\n5.2 Attach Development VPC C·∫•u h√¨nh:\nName tag: Dev-VPC-TGW-Attachment Transit Gateway ID: Hub-TGW Attachment type: VPC VPC ID: Development-VPC Subnet IDs: - Dev-TGW-Subnet-1a - Dev-TGW-Subnet-1b "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.3-configure-default-route-table/",
	"title": "Configure Default Route Table",
	"tags": [],
	"description": "",
	"content": "3.1. Disable Default Association and Propagation We will disable the default behaviors on the Transit Gateway\u0026rsquo;s original route table to ensure complete control.\nNavigate to Transit Gateway Route Tables. Select the default route table for Hub-TGW (the one not named Hub-Route-Table or Spoke-Route-Table). Select the Associations tab, select all associations, and click Delete association. Select the Propagations tab, select all propagations, and click Delete propagation. If the Associations and Propagations tabs are already empty, you do not need to perform the deletion and can skip this step.\nDisabling the default route table ensures that you have full control over traffic flow and avoid unintended connections.\n"
},
{
	"uri": "http://localhost:1313/5-routing-security/5.3-advanced-security-group-configuration/",
	"title": "Advanced Security Group Configuration",
	"tags": [],
	"description": "",
	"content": "Security Groups act as a virtual firewall for instances, controlling inbound and outbound traffic. We will configure them following the principle of least privilege.\n3.1 Centralized Security Group Management Hub Security Group This security group allows shared services in the Hub VPC to communicate with the Spokes.\nName: Hub-Shared-Services-SG\rDescription: Security group for shared services in the Hub\rInbound Rules:\r- Type: HTTPS (443), Source: 10.1.0.0/16, 10.2.0.0/16\r- Type: DNS (53), Source: 10.1.0.0/16, 10.2.0.0/16\r- Type: NTP (123), Source: 10.1.0.0/16, 10.2.0.0/16\rOutbound Rules:\r- Type: All Traffic, Destination: 0.0.0.0/0 Cross-VPC Communication Security Group Allows controlled communication between specific applications in different VPCs.\nName: Cross-VPC-Communication-SG\rDescription: Allows specific cross-VPC communication\rInbound Rules:\r- Type: Custom TCP (8080), Source: sg-xxxxxxxxx (Specific application SG)\r- Type: Custom TCP (5432), Source: sg-xxxxxxxxx (Database client SG) 3.2 Micro-segmentation We create separate security groups for each application tier to limit the attack surface.\nWeb Tier Security Group Name: Prod-Web-Tier-SG\rInbound: HTTP/HTTPS from ALB, SSH from Bastion\rOutbound: Custom TCP (8080) to App Tier App Tier Security Group Name: Prod-App-Tier-SG\rInbound: Custom TCP (8080) from Web Tier, SSH from Bastion\rOutbound: MySQL/Aurora (3306) to DB Tier DB Tier Security Group Name: Prod-DB-Tier-SG\rInbound: MySQL/Aurora (3306) from App Tier\rOutbound: HTTPS (443) for updates "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.1-create-hub-vpc/",
	"title": "Create Hub VPC",
	"tags": [],
	"description": "",
	"content": "Step 1: Create Hub VPC 1.1 Create VPC In the VPC Console, select Your VPCs Click Create VPC Configure as follows: Name tag: Hub-VPC\rIPv4 CIDR block: 10.0.0.0/16\rIPv6 CIDR block: No IPv6 CIDR block\rTenancy: Default Click Create VPC 1.2 Enable DNS Settings Select the newly created Hub VPC Click Actions ‚Üí Edit VPC settings 3. Enable:\nEnable DNS resolution Enable DNS hostnames 4. Click Save\n"
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.3-create-internet-gateway/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Step 3: Create Internet Gateway 3.1 Create and Attach Internet Gateway In the VPC Console, select Internet Gateways Click Create Internet Gateway Configure as follows: Name tag: Hub-IGW 4. Click Create Internet Gateway 5. Select the newly created IGW, click Actions ‚Üí Attach to VPC 6. Select Hub-VPC and click Attach Internet Gateway "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.4-create-nat-gateways/",
	"title": "Create NAT Gateways",
	"tags": [],
	"description": "",
	"content": "Step 4: Create NAT Gateways 4.1 NAT Gateway for AZ-1a In the VPC Console, select NAT Gateways Click Create NAT Gateway Configure as follows: Name: Hub-NAT-Gateway-1a\rSubnet: Hub-Public-Subnet-1a\rConnectivity type: Public\rElastic IP allocation ID: Create new EIP 4. Click Create NAT Gateway\n4.2 NAT Gateway for AZ-1b Name: Hub-NAT-Gateway-1b\rSubnet: Hub-Public-Subnet-1b\rConnectivity type: Public\rElastic IP allocation ID: Create new EIP We create 2 NAT Gateways to ensure high availability.\n"
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.2-create-subnets/",
	"title": "Create Subnet",
	"tags": [],
	"description": "",
	"content": "Step 2: Create Subnets 2.1 Public Subnets (for NAT Gateway and Internet Gateway) Public Subnet AZ-1a Name: Hub-Public-Subnet-1a\rVPC: Hub-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.0.1.0/24 Public Subnet AZ-1b Name: Hub-Public-Subnet-1b\rVPC: Hub-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.0.2.0/24 2.2 Private Subnets (for shared services) Private Subnet AZ-1a Name: Hub-Private-Subnet-1a\rVPC: Hub-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.0.11.0/24 Private Subnet AZ-1b Name: Hub-Private-Subnet-1b\rVPC: Hub-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.0.12.0/24 2.3 Transit Gateway Subnets TGW Subnet AZ-1a Name: Hub-TGW-Subnet-1a\rVPC: Hub-VPC\rAvailability Zone: ap-southeast-1a\rIPv4 CIDR block: 10.0.21.0/24 TGW Subnet AZ-1b Name: Hub-TGW-Subnet-1b\rVPC: Hub-VPC\rAvailability Zone: ap-southeast-1b\rIPv4 CIDR block: 10.0.22.0/24 "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.1-connection-testing/6.1.3-dns-resolution-testing/",
	"title": "DNS Resolution Testing",
	"tags": [],
	"description": "",
	"content": "1.3 DNS Resolution Testing This section verifies the domain name resolution capabilities of instances, both internal and external. These tests are performed from the Hub VPC\u0026rsquo;s Bastion Host.\nNote:\nEnsure the nslookup tool is installed on the Bastion Host (e.g., sudo yum install bind-utils -y or sudo apt install dnsutils -y). Replace placeholder IP addresses and internal DNS names with your actual values. Tests and Expected Results: Internal DNS resolution test: Command: nslookup ip-\u0026lt;IP_instance_Production_or_Development_with_hyphens\u0026gt;.ap-southeast-1.compute.internal * Expected Result: SUCCESS (returns the corresponding IP address). Confirms the VPC\u0026rsquo;s DNS Resolver can resolve internal DNS names.\nExternal DNS resolution test: Command: nslookup google.com * Expected Result: SUCCESS (returns google.com\u0026rsquo;s public IP address). Confirms external domain names can be resolved.\nDNS VPC Endpoint test: Command: nslookup s3.ap-southeast-1.amazonaws.com (or other services) * Expected Result: SUCCESS (returns the private IP address of the VPC Endpoint in your VPC). Confirms the VPC Endpoint is working, allowing access to AWS services without going over the internet.\nReverse DNS resolution test: Command: nslookup \u0026lt;IP_instance_Production_or_Development\u0026gt; * Expected Result: SUCCESS (returns the internal DNS name of the corresponding instance). Confirms the DNS Resolver can resolve IP addresses to DNS names.\n"
},
{
	"uri": "http://localhost:1313/3-hub-vpc/",
	"title": "Hub VPC Overview",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will create the Hub VPC - the center of the hub-and-spoke architecture, which contains shared services like NAT Gateway, DNS, and VPC Endpoints.\nSections in this chapter:\nStep 1: Create Hub VPC Step 2: Create Subnets Step 3: Create Internet Gateway Step 4: Create NAT Gateways Step 5: Configure Route Tables Step 6: Attach Hub VPC to Transit Gateway Step 7: Monitoring and Logging (VPC Flow Logs) Step 8: Create VPC Endpoints Step 9: Security Groups Step 10: Create Bastion Host (Optional) Step 11: Testing Hub VPC Cost Optimization Troubleshooting Next Steps References "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.3-security-testing/",
	"title": "Security Testing",
	"tags": [],
	"description": "",
	"content": "Step 3: Security Testing Security testing is an indispensable part of ensuring that your hub-and-spoke network architecture is protected from unauthorized access and potential threats. These tests focus on verifying the effectiveness of security mechanisms such as Security Groups, Network ACLs, and VPC flow log analysis.\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.2-performance-testing/6.2.3-transit-gateway-performance/",
	"title": "Transit Gateway Performance",
	"tags": [],
	"description": "",
	"content": "2.3 Transit Gateway Performance Monitoring Transit Gateway performance is crucial to ensure it doesn\u0026rsquo;t become a bottleneck in your network architecture. Transit Gateway handles inter-VPC and inter-account traffic, so tracking metrics like BytesIn, BytesOut, PacketsIn, and PacketsOut helps identify performance issues, congestion, or unusual traffic patterns early. This ensures your applications can communicate efficiently and maintain high performance.\nMonitoring Transit Gateway Metrics "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.3-security-testing/6.3.3-vpc-flow-log-analysis/",
	"title": "VPC Flow Log Analysis",
	"tags": [],
	"description": "",
	"content": "3.3 VPC Flow Log Analysis Explanation: VPC Flow Logs record all IP traffic going to and from network interfaces in your VPC. Analyzing these logs is a powerful security and troubleshooting tool. It helps you:\nDetect suspicious activity: Look for rejected connections (REJECT), unfamiliar IP addresses attempting to access your resources, or unusual traffic patterns. Verify security rules: Ensure that Security Groups and Network ACLs are blocking or allowing traffic as expected. Troubleshoot connectivity issues: Identify the root cause of connectivity problems by examining details of dropped packets or unwanted flows. Monitor network performance: Analyze the amount of data transferred between components to detect bottlenecks or unusual traffic patterns. Analyzing VPC flow logs from separate log groups for Development, Hub, and Production is extremely important because it allows you to:\nMonitor in detail by environment: Easily focus on traffic and security events specific to each environment without being cluttered by data from other environments. More effective troubleshooting: When there are connectivity or security issues, you can quickly narrow down the problem to a specific environment and analyze relevant logs. Ensure compliance and auditing: Provides detailed auditing capabilities for network traffic in each environment, helping to meet compliance requirements. Detect anomalies: Easily identify unusual traffic patterns or unauthorized access attempts in each separate area of the network architecture. Analyzing Security Events (Manual) To analyze VPC flow logs, you will use the AWS CLI to query CloudWatch Logs Insights.\nImportant Note:\nYou need AWS CLI permissions configured on your computer or Bastion Host to access CloudWatch Logs. You can adjust 1 hour ago to change the query time range. You have the following VPC flow log groups: /aws/vpc/development/flowlogs, /aws/vpc/hub/flowlogs, /aws/vpc/production/flowlogs. You will need to run the queries below for each log group to get a comprehensive view. 1. Query rejected connections (potential security events):\nThis command will search for rejected connections in your VPC flow logs over the last hour, grouped by source IP address, destination IP address, and destination port, then sorted by the number of rejections.\nFor Development VPC, Hub VPC, and Production VPC: aws logs start-query \\ --log-group-name \u0026#34;/aws/vpc/development/flowlogs\u0026#34; \u0026#34;/aws/vpc/hub/flowlogs\u0026#34; \u0026#34;/aws/vpc/production/flowlogs\u0026#34; \\ --start-time $(date -d \u0026#39;1 hour ago\u0026#39; +%s) \\ --end-time $(date +%s) \\ --query-string \u0026#39;fields @timestamp, srcaddr, dstaddr, srcport, dstport, protocol, action | filter action = \u0026#34;REJECT\u0026#34; | stats count() as rejected_count by srcaddr, dstaddr, dstport | sort rejected_count desc | limit 20\u0026#39; Expected Result: Each command will return a table containing queryId. You then need to use aws logs get-query-results --query-id \u0026lt;queryId\u0026gt; to view the actual results. The result will be a table listing the source IP addresses, destination IP addresses, and destination ports that were rejected, along with the number of rejections. If no connections were rejected during that time, the table will be empty. "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.4-configure-security-groups/",
	"title": "Configure Security Groups",
	"tags": [],
	"description": "",
	"content": "Step 6: Configure Security Groups 6.1 Production Security Groups Load Balancer Security Group (Prod-ALB-SG) Before configuring the Application Security Group, you need to create the Load Balancer Security Group.\nIn the VPC Console, select Security Groups. Click Create security group. Configure: Parameter Value Name Prod-ALB-SG Description Security group for production load balancer VPC Production-VPC Inbound Rules Type: HTTP (80), Source: 0.0.0.0/0 \\ Type: HTTPS (443), Source: 0.0.0.0/0 Outbound Rules Type: All Traffic, Destination: 0.0.0.0/0 Click Create security group. Application Security Group (Prod-App-SG) Name: Prod-App-SG\rDescription: Security group for production applications\rVPC: Production-VPC\rInbound Rules:\r- Type: HTTP (80)\rSource: Prod-ALB-SG\r- Type: HTTPS (443)\rSource: Prod-ALB-SG\r- Type: SSH (22)\rSource: 10.0.0.0/16 (Hub VPC for bastion)\r- Type: All ICMP - IPv4\rSource: 10.0.0.0/16 (Hub VPC for ping testing)\rOutbound Rules:\r- Type: All Traffic\rDestination: 0.0.0.0/0 Database Security Group (Prod-DB-SG) Name: Prod-DB-SG\rDescription: Security group for production databases\rVPC: Production-VPC\rInbound Rules:\r- Type: MySQL/Aurora (3306)\rSource: Prod-App-SG\r- Type: PostgreSQL (5432)\rSource: Prod-App-SG\rOutbound Rules:\r- Type: All Traffic\rDestination: 0.0.0.0/0 6.2 Development Security Groups Load Balancer Security Group (Dev-ALB-SG) Before configuring the Application Security Group, you need to create the Load Balancer Security Group.\nIn the VPC Console, select Security Groups.\nClick Create security group.\nConfigure:\nParameter Value Name Dev-ALB-SG Description Security group for development load balancer VPC Development-VPC Inbound Rules Type: HTTP (80), Source: 0.0.0.0/0 \\ Type: HTTPS (443), Source: 0.0.0.0/0 Outbound Rules Type: All Traffic, Destination: 0.0.0.0/0 Click Create security group.\nApplication Security Group (Dev-App-SG) Name: Dev-App-SG\rDescription: Security group for development applications\rVPC: Development-VPC\rInbound Rules:\r- Type: All Traffic\rSource: 10.2.0.0/16 (within Dev VPC)\r- Type: SSH (22)\rSource: 10.0.0.0/16 (Hub VPC for bastion)\r- Type: All ICMP - IPv4\rSource: 10.0.0.0/16 (Hub VPC for ping testing)\rOutbound Rules:\r- Type: All Traffic\rDestination: 0.0.0.0/0 Database Security Group (Dev-DB-SG) Name: Dev-DB-SG\rDescription: Security group for development databases\rVPC: Development-VPC\rInbound Rules:\r- Type: MySQL/Aurora (3306)\rSource: Dev-App-SG\r- Type: PostgreSQL (5432)\rSource: Dev-App-SG\rOutbound Rules:\r- Type: All Traffic\rDestination: 0.0.0.0/0 "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/",
	"title": "Creating Spoke VPCs (Production &amp; Development)",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will delve into setting up and configuring Spoke VPCs, an essential component of the Hub-and-Spoke network architecture on AWS.\nMain Content:\nCreate Spoke VPCs (4.1): Detailed instructions on how to create separate VPCs for Production and Development environments. Configure Route Tables (4.2): Set up route tables for each VPC to control traffic flow. Attach to Transit Gateway (4.3): Attach the Spoke VPCs to the Transit Gateway to connect with the Hub VPC. Configure Security Groups (4.4): Define firewall rules to protect resources within each VPC. Create Test Instances (4.5): Launch EC2 instances to test connectivity. Update Route Tables (4.6): Add the necessary routes to allow communication between VPCs and internet access. Testing Connectivity (4.7): Verify that all network components are working correctly. Advanced Configuration (4.8): Optional configuration of Network ACLs and other settings. Next Steps (4.9): Introduction to the topics that will be covered in the next chapter. "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.4-verify-configuration/",
	"title": "Verify Configuration",
	"tags": [],
	"description": "",
	"content": "4.1. Check Transit Gateway Status In the VPC Console, select Transit Gateways. Verify that the status of Hub-TGW is Available. 3. Record the Transit Gateway ID for use in subsequent steps.\n4.2. Check Route Tables Select Transit Gateway Route Tables. Verify that the Hub-Route-Table and Spoke-Route-Table tables have been created successfully and that the default route table has no Associations or Propagations. "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.4-failover-testing/",
	"title": "AZ Failover Testing",
	"tags": [],
	"description": "",
	"content": "4.1 AZ Failover Testing Explanation: Availability Zone (AZ) failover testing is a critical part of ensuring the high availability of your architecture. By simulating the failure of an instance in one AZ, you can verify that your applications can automatically switch to another AZ without significant interruption. This helps confirm that mechanisms like Auto Scaling Groups, Load Balancers, and other multi-AZ configurations are working correctly.\nSimulating AZ Failure Important Notes:\nYou need AWS CLI permissions configured to stop and start EC2 instances. Replace \u0026lt;Instance_ID_to_stop\u0026gt; and \u0026lt;Instance_ID_to_start\u0026gt; with your actual EC2 instance IDs. Perform this test in a non-production environment or during planned maintenance, as it will interrupt the instance. Getting Private IP Addresses of Instances To perform failover tests, you need to know the private IP addresses of instances in each AZ. Getting IPs using the AWS CLI ensures accuracy and automation, especially useful in large environments or when instances are dynamically created/deleted.\nYou can use the aws ec2 describe-instances command to get the private IP addresses of instances. You will need to know the IDs of the instances (or their tag names) to filter the results.\nHow to get private IPs of instances:\nGet Hub Instance IP (AZ1a):\nIf you know the Instance ID:\naws ec2 describe-instances --instance-ids \u0026lt;Hub_Instance_ID\u0026gt; --query \u0026#34;Reservations[].Instances[].PrivateIpAddress\u0026#34; --output text (Replace \u0026lt;Hub_Instance_ID\u0026gt; with your actual Hub Instance ID)\nIf you know the Instance Tag name:\naws ec2 describe-instances --filters \u0026#34;Name=tag:Name,Values=HubInstanceName\u0026#34; --query \u0026#34;Reservations[].Instances[].PrivateIpAddress\u0026#34; --output text (Replace HubInstanceName with your actual Hub Instance Tag name)\nGet Prod Instance IP (AZ1b):\nIf you know the Instance ID: aws ec2 describe-instances --instance-ids \u0026lt;Prod_Instance_ID\u0026gt; --query \u0026#34;Reservations[].Instances[].PrivateIpAddress\u0026#34; --output text If you know the Instance Tag name: aws ec2 describe-instances --filters \u0026#34;Name=tag:Name,Values=ProdInstanceName\u0026#34; --query \u0026#34;Reservations[].Instances[].PrivateIpAddress\u0026#34; --output text Get Dev Instance IP (AZ1b):\nIf you know the Instance ID: aws ec2 describe-instances --instance-ids \u0026lt;Dev_Instance_ID\u0026gt; --query \u0026#34;Reservations[].Instances[].PrivateIpAddress\u0026#34; --output text If you know the Instance Tag name: aws ec2 describe-instances --filters \u0026#34;Name=tag:Name,Values=DevInstanceName\u0026#34; --query \u0026#34;Reservations[].Instances[].PrivateIpAddress\u0026#34; --output text Once you have these private IP addresses, you can use them in the ping commands in Step 1 of the Simulating AZ Failure section.\n1. Test connectivity to both AZs:\nBefore simulating a failure, verify that you can connect to instances in both AZs.\nTest connectivity to AZ-1a (Hub Instance): ping -c 3 \u0026lt;IP_Hub_Instance_AZ1a\u0026gt; Test connectivity to AZ-1b (Prod Instance): ping -c 3 \u0026lt;IP_Prod_Instance_AZ1b\u0026gt; Test connectivity to AZ-1b (Dev Instance): ping -c 3 \u0026lt;IP_Dev_Instance_AZ1b\u0026gt; Expected Result: All three ping commands succeed (0% packet loss), indicating that the instances are active and reachable. 2. Simulate instance failure in one AZ:\nStop an instance in one AZ to simulate a failure.\nCommand: aws ec2 stop-instances --instance-ids \u0026lt;Instance_ID_to_stop\u0026gt; (Replace \u0026lt;Instance_ID_to_stop\u0026gt; with the ID of the instance you want to stop. Example: i-xxxxxxxxx)\nExpected Result: The command will return information about the instance being stopped. 3. Wait and test failover:\nWait for a period of time for AWS failover mechanisms to work, then recheck connectivity to the other AZ.\nCommand: sleep 30 ping -c 3 \u0026lt;IP_instance_in_other_AZ\u0026gt; (Replace \u0026lt;IP_instance_in_other_AZ\u0026gt; with the IP of the instance in the other AZ that you expect traffic to fail over to.)\nExpected Result: The ping command to the instance in the other AZ still succeeds, indicating that traffic has successfully failed over. 4. Restart instance (after testing):\nAfter completing the test, restart the stopped instance.\nCommand: aws ec2 start-instances --instance-ids \u0026lt;Instance_ID_to_start\u0026gt; (Replace \u0026lt;Instance_ID_to_start\u0026gt; with the ID of the instance you stopped.)\nExpected Result: The command will return information about the instance being started. "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.4-network-acl-implementation/",
	"title": "Network ACL Implementation",
	"tags": [],
	"description": "",
	"content": "Network ACLs (NACLs) are an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets.\n4.1 Production Network ACL Configured tightly to only allow necessary traffic and deny all communication from the Development environment.\nName: Production-NACL\rVPC: Production-VPC\rInbound Rules:\rRule # | Type | Protocol | Port Range | Source | Allow/Deny\r100 | HTTP | TCP | 80 | 0.0.0.0/0 | ALLOW\r110 | HTTPS | TCP | 443 | 0.0.0.0/0 | ALLOW\r120 | SSH | TCP | 22 | 10.0.0.0/16 | ALLOW\r130 | MySQL | TCP | 3306 | 10.1.0.0/16 | ALLOW\r140 | Custom TCP | TCP | 8080 | 10.1.0.0/16 | ALLOW\r150 | Custom TCP | TCP | 1024-65535 | 0.0.0.0/0 | ALLOW\r200 | All Traffic | All | All | 10.2.0.0/16 | DENY\rOutbound Rules:\rRule # | Type | Protocol | Port Range | Destination | Allow/Deny\r100 | All Traffic | All | All | 0.0.0.0/0 | ALLOW 4.2 Development Network ACL Allows internal and Hub communication, but denies any connection attempts from the Production environment.\nName: Development-NACL\rVPC: Development-VPC\rInbound Rules:\rRule # | Type | Protocol | Port Range | Source | Allow/Deny\r100 | All Traffic | All | All | 10.0.0.0/16 | ALLOW\r110 | All Traffic | All | All | 10.2.0.0/16 | ALLOW\r120 | Ephemeral | TCP | 1024-65535 | 0.0.0.0/0 | ALLOW\r200 | All Traffic | All | All | 10.1.0.0/16 | DENY\rOutbound Rules:\rRule # | Type | Protocol | Port Range | Destination | Allow/Deny\r100 | All Traffic | All | All | 0.0.0.0/0 | ALLOW 4.3 Hub Network ACL Allows traffic from the Spokes and the internet, but has a specific rule for administrative access (SSH) from a designated public IP address.\nName: Hub-NACL\rVPC: Hub-VPC\rInbound Rules:\rRule # | Type | Protocol | Port Range | Source | Allow/Deny\r100 | All Traffic | All | All | 10.1.0.0/16 | ALLOW\r110 | All Traffic | All | All | 10.2.0.0/16 | ALLOW\r120 | HTTP | TCP | 80 | 0.0.0.0/0 | ALLOW\r130 | HTTPS | TCP | 443 | 0.0.0.0/0 | ALLOW\r140 | SSH | TCP | 22 | 66.249.66.161/32 | ALLOW\r150 | Custom TCP | TCP | 1024-65535 | 0.0.0.0/0 | ALLOW\rOutbound Rules:\rRule # | Type | Protocol | Port Range | Destination | Allow/Deny\r100 | All Traffic | All | All | 0.0.0.0/0 | ALLOW "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.5-create-test-instances/",
	"title": "Create Test Instances",
	"tags": [],
	"description": "",
	"content": "Step 7: Create Test Instances 7.1 Production Test Instance In the EC2 Console, click Launch Instance Configure: Name: Prod-Test-Instance\rAMI: Amazon Linux 2023\rInstance type: t3.micro\rKey pair: Use existing or create new\rNetwork settings:\r- VPC: Production-VPC\r- Subnet: Prod-App-Subnet-1a\r- Auto-assign public IP: Disable\r- Security group: Prod-App-SG 7.2 Development Test Instance Name: Dev-Test-Instance\rAMI: Amazon Linux 2023\rInstance type: t3.micro\rKey pair: Use existing or create new\rNetwork settings:\r- VPC: Development-VPC\r- Subnet: Dev-App-Subnet-1a\r- Auto-assign public IP: Disable\r- Security group: Dev-App-SG "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.5-cost-optimization-and-troubleshooting/",
	"title": "Cost Optimization and Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Pricing Model Hourly charge: Approximately $0.05/hour for each Transit Gateway attachment. Data processing fee: $0.02/GB of data processed. Common Troubleshooting Transit Gateway stuck in \u0026ldquo;Pending\u0026rdquo; state: Wait longer or check service quotas. Cannot create attachment: Ensure the Transit Gateway is in the \u0026ldquo;Available\u0026rdquo; state and you have sufficient IAM permissions. Routing issues: Re-check the associations and propagations in the route table. "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.5-configure-route-tables/",
	"title": "Configure Route Tables",
	"tags": [],
	"description": "",
	"content": "Step 5: Configure Route Tables 5.1 Public Route Table Select Route Tables Click Create Route Table Configure as follows: Name: Hub-Public-RT\rVPC: Hub-VPC 4. After creation, click Edit routes 5. Add route:\nDestination: 0.0.0.0/0\rTarget: Hub-IGW 6. Click Save routes 7. Click Edit subnet associations 8. Associate with:\nHub-Public-Subnet-1a Hub-Public-Subnet-1b 5.2 Private Route Table AZ-1a Name: Hub-Private-RT-1a\rVPC: Hub-VPC\rRoutes:\r- 0.0.0.0/0 ‚Üí Hub-NAT-Gateway-1a\rSubnet Associations:\r- Hub-Private-Subnet-1a 5.3 Private Route Table AZ-1b Name: Hub-Private-RT-1b\rVPC: Hub-VPC\rRoutes:\r- 0.0.0.0/0 ‚Üí Hub-NAT-Gateway-1b\rSubnet Associations:\r- Hub-Private-Subnet-1b 5.4 Transit Gateway Route Table Name: Hub-TGW-RT\rVPC: Hub-VPC\rRoutes:\r- 10.1.0.0/16 ‚Üí Transit Gateway (to be added later)\r- 10.2.0.0/16 ‚Üí Transit Gateway (to be added later)\rSubnet Associations:\r- Hub-TGW-Subnet-1a\r- Hub-TGW-Subnet-1b "
},
{
	"uri": "http://localhost:1313/5-routing-security/",
	"title": "Configure Routing and Security",
	"tags": [],
	"description": "",
	"content": "Chapter 5: Configure Routing and Security In this chapter, we will dive deep into configuring advanced routing policies and implementing comprehensive security measures for our hub-and-spoke architecture on AWS.\nCloud network architectures, especially the hub-and-spoke model, demand a robust routing and security strategy to ensure performance, scalability, and compliance. Effective routing helps control data flow between different environments (e.g., production, development, shared services), while multi-layered security is key to protecting resources from internal and external threats. This chapter will provide an overview and detailed guidance on setting up these components, from Transit Gateway configuration to implementing protective measures like Security Groups and Network ACLs, as well as monitoring and optimization tools.\nWe will explore how to use AWS Transit Gateway for granular traffic control, segment environments to enhance security, and set up multiple layers of protection from Network ACLs to Security Groups. Additionally, this chapter will guide you through monitoring, logging, and best practices to ensure a secure, efficient, and resilient network infrastructure.\nSections in this chapter: 5.1 Advanced Transit Gateway Routing 5.2 Traffic Segmentation 5.3 Advanced Security Group Configuration 5.4 Network ACL Implementation 5.5 VPC Flow Logs and Monitoring 5.6 Security Monitoring and Alerting 5.7 Traffic Analysis and Optimization 5.8 Implementing Security Best Practices 5.9 Disaster Recovery and Business Continuity 5.10 Security Configuration Testing 5.11 Additional Considerations "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.5-monitoring-setup/",
	"title": "Monitoring Setup",
	"tags": [],
	"description": "",
	"content": "Step 5: Monitoring Setup Setting up monitoring is crucial for maintaining the stability, performance, and security of your hub-and-spoke network architecture. By collecting and analyzing metrics, logs, and events, you can proactively detect and resolve issues, ensuring continuous and efficient system operation.\n"
},
{
	"uri": "http://localhost:1313/5-routing-security/5.5-vpc-flow-logs-and-monitoring/",
	"title": "VPC Flow Logs and Monitoring",
	"tags": [],
	"description": "",
	"content": "Enabling Flow Logs is essential for gaining detailed visibility into network traffic, which aids in troubleshooting and security investigations.\n5.1 Enable Comprehensive Flow Logs We will enable flow logs for all VPCs to capture information about the IP traffic going to and from network interfaces.\nHub VPC Flow Logs aws ec2 create-flow-logs \\ --resource-type VPC \\ --resource-ids vpc-hub-xxxxxxxxx \\ --traffic-type ALL \\ --log-destination-type cloud-watch-logs \\ --log-group-name /aws/vpc/hub/flowlogs \\ --deliver-logs-permission-arn arn:aws:iam::ACCOUNT:role/flowlogsRole Production VPC Flow Logs aws ec2 create-flow-logs \\ --resource-type VPC \\ --resource-ids vpc-prod-xxxxxxxxx \\ --traffic-type ALL \\ --log-destination-type cloud-watch-logs \\ --log-group-name /aws/vpc/production/flowlogs \\ --deliver-logs-permission-arn arn:aws:iam::ACCOUNT:role/flowlogsRole Development VPC Flow Logs aws ec2 create-flow-logs \\ --resource-type VPC \\ --resource-ids vpc-dev-xxxxxxxxx \\ --traffic-type ALL \\ --log-destination-type cloud-watch-logs \\ --log-group-name /aws/vpc/development/flowlogs \\ --deliver-logs-permission-arn arn:aws:iam::ACCOUNT:role/flowlogsRole 5.2 Transit Gateway Flow Logs Enable flow logs for the Transit Gateway itself to get a holistic view of all traffic passing through the central network.\naws ec2 create-transit-gateway-flow-logs \\ --transit-gateway-id tgw-xxxxxxxxx \\ --traffic-type ALL \\ --log-destination-type cloud-watch-logs \\ --log-group-name /aws/transitgateway/flowlogs "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.6-update-route-tables/",
	"title": "Update Route Tables with Transit Gateway",
	"tags": [],
	"description": "",
	"content": "Step 8: Update Route Tables with Transit Gateway After the attachments are created, update the route tables. Note: When adding a route in the VPC Route Table, the Target must be the Transit Gateway ID (tgw-xxxxxxxxxxxxxxxxx), not the Attachment ID.\n8.1 Update Hub VPC Route Tables Select Hub-TGW-RT (the VPC Route Table in the Hub VPC, associated with the Hub\u0026rsquo;s TGW Subnets) Edit routes, add: - 10.1.0.0/16 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, to Production)\r- 10.2.0.0/16 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, to Development)\r- 0.0.0.0/0 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, if you want internet traffic from Spoke VPCs to go through the Hub) 8.2 Update Spoke VPC Route Tables Update all route tables in the Production and Development VPCs to point the default route (0.0.0.0/0) to the Transit Gateway, and other routes to the Hub VPC/other Spoke VPCs.\nFor Production VPC Route Tables (Prod-App-RT, Prod-DB-RT, Prod-TGW-RT): - 0.0.0.0/0 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW)\r- 10.0.0.0/16 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, to Hub)\r- 10.2.0.0/16 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, to Dev, if needed) For Development VPC Route Tables (Dev-App-RT, Dev-DB-RT, Dev-TGW-RT): - 0.0.0.0/0 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW)\r- 10.0.0.0/16 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, to Hub)\r- 10.1.0.0/16 ‚Üí tgw-xxxxxxxxxxxxxxxxx (ID of Hub-TGW, to Prod, if needed) "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.6-advanced-topic-resource-sharing/",
	"title": "Advanced Topic (Optional): Resource Sharing",
	"tags": [],
	"description": "",
	"content": "If you want to share this Transit Gateway with other AWS accounts within the same AWS Organization, you can use AWS Resource Access Manager (RAM).\nOpen the AWS Resource Access Manager (RAM) service. Click Create resource share. Select Transit Gateways as the resource type and choose Hub-TGW. In Principals, enter the AWS account ID or the OU of the organization you want to share with. "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.6-attach-hub-vpc-to-transit-gateway/",
	"title": "Attach Hub VPC to Transit Gateway",
	"tags": [],
	"description": "",
	"content": "Step 6: Attach Hub VPC to Transit Gateway 6.1 Create Transit Gateway Attachment In the VPC Console, select Transit Gateway Attachments Click Create Transit Gateway Attachment 3. Configure as follows:\nName tag: Hub-VPC-TGW-Attachment\rTransit Gateway ID: Hub-TGW (from chapter 2)\rAttachment type: VPC\rVPC ID: Hub-VPC\rSubnet IDs: - Hub-TGW-Subnet-1a\r- Hub-TGW-Subnet-1b 4. Click Create Transit Gateway Attachment\n6.2 Associate with Hub Route Table Select Transit Gateway Route Tables Select Hub-Route-Table Click Associations tab Click Create association 5. Select Hub VPC attachment\n6. Click Create association\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.6-monitoring-cost/",
	"title": "Monitoring Costs",
	"tags": [],
	"description": "",
	"content": "Monitoring Costs Understanding and optimizing monitoring costs is crucial for effective budget management in a cloud environment. Monitoring services like CloudWatch can incur costs based on the amount of data collected, the number of alarms, and query frequency. By implementing cost optimization strategies, you can minimize expenses while maintaining essential monitoring capabilities.\nMonitoring Costs CloudWatch Metrics: ~$0.30/metric/month CloudWatch Logs: ~$0.50/GB ingested CloudWatch Alarms: ~$0.10/alarm/month Lambda Functions: ~$0.20/1M requests Estimated Total: ~$20-30/month Cost Optimization Filter logs to reduce ingestion costs Use metric filters instead of custom metrics where possible Set appropriate retention periods Archive old data to S3 "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.6-security-monitoring-and-alerting/",
	"title": "Security Monitoring and Alerting",
	"tags": [],
	"description": "",
	"content": "Setting up proactive monitoring and alerting allows us to detect and respond quickly to potential security events.\n6.1 CloudWatch Alarms We create alarms based on Transit Gateway metrics to be notified of unusual activities.\nAlert on Abnormal Traffic Patterns aws cloudwatch put-metric-alarm \\ --alarm-name \u0026#34;High-Cross-VPC-Traffic\u0026#34; \\ --metric-name BytesIn \\ --namespace AWS/TransitGateway \\ --statistic Sum \\ --period 300 \\ --threshold 1000000000 \\ --comparison-operator GreaterThanThreshold Alert on Failed Connection Attempts aws cloudwatch put-metric-alarm \\ --alarm-name \u0026#34;High-Rejected-Connections\u0026#34; \\ --metric-name PacketDropCount \\ --namespace AWS/TransitGateway \\ --statistic Sum \\ --period 300 \\ --threshold 1000 \\ --comparison-operator GreaterThanThreshold 6.2 Custom Metrics Use a Lambda function to collect custom metrics, such as the number of rules in security groups, and send them to CloudWatch for tracking.\n# Lambda function to count rules in Security Groups import boto3 def lambda_handler(event, context): ec2 = boto3.client(\u0026#39;ec2\u0026#39;) cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) # ... logic to get SGs, count rules, and put metrics 6.3 Troubleshooting Lambda Deployment If the Lambda function times out, you need to increase the \u0026ldquo;Timeout\u0026rdquo; value in the function\u0026rsquo;s configuration, for example, from 3 seconds to 30 seconds. 6.4 Threat Monitoring with Amazon GuardDuty Enabling Amazon GuardDuty is a best practice for intelligent threat detection. GuardDuty automatically analyzes AWS CloudTrail logs, VPC Flow Logs, and DNS logs to identify malicious or unauthorized activities.\n"
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/",
	"title": "Testing and Monitoring",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will perform comprehensive testing and set up a monitoring system for the hub-and-spoke architecture.\nThis chapter provides detailed guidance on how to test the connectivity, performance, security, and failover capabilities of the hub-and-spoke network architecture. Additionally, it guides the setup of a comprehensive monitoring system using CloudWatch to ensure stable and efficient operation.\nTable of Contents 6.1 Connection Testing 6.1.1 Basic Connection Testing 6.1.2 Advanced Connection Testing 6.1.3 DNS Connection Testing 6.2 Performance Testing 6.2.1 Network Latency Testing 6.2.2 Bandwidth Testing 6.2.3 Transit Gateway Performance 6.3 Security Testing 6.3.1 Security Group Testing 6.3.2 Network ACL Testing 6.3.3 VPC Flow Log Analysis 6.4 Failover Testing 6.5 Monitoring Setup 6.5.1 Cloudwatch Dashboard 6.6 Monitoring Costs 6.7 Common Troubleshooting 6.8 Next Steps 6.9 References "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.7-testing-connectivity/",
	"title": "Testing Connectivity",
	"tags": [],
	"description": "",
	"content": "Step 9: Testing Connectivity 9.1 Test from Bastion Host to Spoke Instances Connect to the Bastion Host from your local machine via SSH:\nssh -i \u0026#34;path_to_your_bastion_key/Hub-Bastion-Host-Key.pem\u0026#34; ec2-user@\u0026lt;Public_IP_of_Bastion_Host\u0026gt; Copy the Spoke Instance\u0026rsquo;s Key Pair to the Bastion Host (if different from the Bastion Host\u0026rsquo;s Key Pair):\nFrom your local machine\u0026rsquo;s terminal: scp -i \u0026#34;path_to_your_bastion_key/Hub-Bastion-Host-Key.pem\u0026#34; \u0026#34;path_to_your_spoke_key/Spoke-Test-Instance-Key.pem\u0026#34; ec2-user@\u0026lt;Public_IP_of_Bastion_Host\u0026gt;:~/.ssh/ 3. Set the correct permissions for the Key Pair file on the Bastion Host: * From the Bastion Host\u0026rsquo;s terminal: bash\rchmod 400 ~/.ssh/Spoke-Test-Instance-Key.pem\r4. Test connectivity (Ping and SSH) to the Spoke instances from the Bastion Host: * From the Bastion Host\u0026rsquo;s terminal: bash\r# Test Production instance\rping \u0026lt;Private_IP_of_Prod-Test-Instance\u0026gt;\rbash\rssh -i ~/.ssh/Spoke-Test-Instance-Key.pem ec2-user@\u0026lt;Private_IP_of_Prod-Test-Instance\u0026gt;\rbash\r# Test Development instance\rping \u0026lt;Private_IP_of_Dev-Test-Instance\u0026gt;\rbash\rssh -i ~/.ssh/Spoke-Test-Instance-Key.pem ec2-user@\u0026lt;Private_IP_of_Dev-Test-Instance\u0026gt;\r9.2 Test Internet Connectivity from Spoke VPCs After successfully SSHing into Prod-Test-Instance:\n# Test internet connectivity ping google.com curl -I https://aws.amazon.com # Check route ip route show After successfully SSHing into Dev-Test-Instance:\n# Test internet connectivity ping google.com curl -I https://aws.amazon.com # Check route ip route show 9.3 Test Inter-VPC Communication # From Production instance ping \u0026lt;Private_IP_of_Dev-Test-Instance\u0026gt; # From Development instance ping \u0026lt;Private_IP_of_Prod-Test-Instance\u0026gt; "
},
{
	"uri": "http://localhost:1313/2-transit-gateway/2.7-next-steps/",
	"title": "Next Steps",
	"tags": [],
	"description": "",
	"content": "In the next chapter, we will:\nCreate a Hub VPC to contain shared services. Attach the Hub VPC to the Transit Gateway. Configure a NAT Gateway and VPC Endpoints in the Hub VPC. Enable VPC Flow Logs to monitor network traffic (we skipped this in this chapter as we don\u0026rsquo;t have a VPC yet). Save the Transit Gateway ID ‚Äì you will need it for the following chapters!\nReferences AWS Transit Gateway User Guide Transit Gateway Quotas "
},
{
	"uri": "http://localhost:1313/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "In this final chapter, we will clean up all the resources created during the workshop to avoid incurring unwanted charges.\nIMPORTANT: Perform the cleanup steps in the correct order to avoid dependency errors. Cleanup actions cannot be undone!\nCleanup Process Overview The cleanup process should be performed in the following order:\nEC2 Instances and Load Balancers VPC Endpoints Transit Gateway Attachments Transit Gateway Route Tables Transit Gateway NAT Gateways and Elastic IPs Internet Gateways Route Tables Subnets Security Groups VPCs CloudWatch Resources "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.7-troubleshooting/",
	"title": "Common Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Common Troubleshooting During the operation of a hub-and-spoke network architecture, encountering issues is inevitable. This section provides guidance on how to troubleshoot common problems related to high latency, connectivity issues, and performance degradation. Understanding the root causes and troubleshooting steps will help you quickly resolve issues and maintain stable system operation.\n1. High Latency Check Transit Gateway routing tables Verify instances are in the correct AZs Review security group rules Check for network congestion 2. Connectivity Issues Verify routing table configurations Check security group rules Validate Network ACL settings Confirm Transit Gateway attachments 3. Performance Degradation Monitor CloudWatch metrics Check resource limitations Review network utilization Validate instance types "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.7-monitoring-and-logging/",
	"title": "Monitoring and Logging (VPC Flow Logs)",
	"tags": [],
	"description": "",
	"content": "Step 7: Monitoring and Logging (VPC Flow Logs) To monitor network traffic in the Hub VPC, we will enable VPC Flow Logs.\n7.1 Enable VPC Flow Logs In the VPC Console, select Your VPCs. Select Hub-VPC. Select the Flow Logs tab, click Create flow log. Configure as follows: Parameter Value Name hub-vpc-flow-log Filter All (Log both accepted and rejected traffic). Maximum aggregation interval 10 minutes Destination Send to CloudWatch Logs Destination log group Create a new log group, e.g., /aws/vpc-flow-logs/hub-vpc Log record format AWS default format Click Create flow log. 7.2 Monitor Metrics on CloudWatch Transit Gateway automatically sends metrics to CloudWatch:\nBytesIn/BytesOut: Data transfer volume. PacketsIn/PacketsOut: Number of packets. PacketDropCount: Number of packets dropped due to no route or ACLs. "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.7-traffic-analysis-and-optimization/",
	"title": "Traffic Analysis and Optimization",
	"tags": [],
	"description": "",
	"content": "Use AWS tools to analyze flow logs, which helps in optimizing performance and enhancing security.\n7.1 Flow Log Analysis Use CloudWatch Logs Insights to run interactive queries on your flow log data.\nQuery for Top Talkers Helps identify applications or servers with unusual bandwidth consumption.\nfields @timestamp, srcaddr, dstaddr, bytes | filter action = \u0026#34;ACCEPT\u0026#34; | stats sum(bytes) as total_bytes by srcaddr, dstaddr | sort total_bytes desc | limit 20 Query for Rejected Traffic Crucial for detecting unauthorized access attempts or misconfigurations.\nfields @timestamp, srcaddr, dstaddr, srcport, dstport, protocol | filter action = \u0026#34;REJECT\u0026#34; | stats count() as rejected_count by srcaddr, dstaddr, dstport | sort rejected_count desc | limit 10 7.2 Performance Optimization Route Table Optimization Regularly review and clean up unnecessary routes in the Transit Gateway route tables.\naws ec2 search-transit-gateway-routes \\ --transit-gateway-route-table-id tgw-rtb-xxxxxxxxx \\ --filters \u0026#34;Name=state,Values=active\u0026#34; Bandwidth Monitoring Use CloudWatch to monitor the bandwidth usage of the Transit Gateway and identify potential bottlenecks.\naws cloudwatch get-metric-statistics \\ --namespace AWS/TransitGateway \\ --metric-name BytesIn \\ --dimensions Name=TransitGateway,Value=tgw-xxxxxxxxx \\ --start-time 2024-07-10T00:00:00Z \\ --end-time 2024-07-11T00:00:00Z \\ --period 3600 \\ --statistics Sum "
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.8-advanced-configuration/",
	"title": "Advanced Configuration",
	"tags": [],
	"description": "",
	"content": "Step 10: Network ACLs (Optional) 10.1 Production Network ACL Name: Prod-NACL\rVPC: Production-VPC\rInbound Rules:\r100 - HTTP (80) - 0.0.0.0/0 - ALLOW\r110 - HTTPS (443) - 0.0.0.0/0 - ALLOW\r120 - SSH (22) - 10.0.0.0/16 - ALLOW\r130 - Ephemeral (1024-65535) - 0.0.0.0/0 - ALLOW\rOutbound Rules:\r100 - All Traffic - 0.0.0.0/0 - ALLOW 10.2 Development Network ACL Name: Dev-NACL\rVPC: Development-VPC\rInbound Rules:\r100 - All Traffic - 10.0.0.0/16 - ALLOW\r110 - Ephemeral (1024-65535) - 0.0.0.0/0 - ALLOW\rOutbound Rules:\r100 - All Traffic - 0.0.0.0/0 - ALLOW Cost Optimization Current Additional Costs Transit Gateway Attachments: $36/month √ó 2 = $72/month Data Processing: $0.02/GB processed EC2 Instances: $7.50/month √ó 2 = $15/month Optimization Tips Right-size instances based on actual usage Use Spot Instances for development Schedule instances to run only during business hours Monitor data transfer costs Troubleshooting Common Issues Cannot reach spoke instances from bastion\nCheck Transit Gateway route tables Verify security group rules Check VPC route tables No internet connectivity from spoke VPCs\nVerify default route points to Transit Gateway Check Hub VPC NAT Gateway status Verify Transit Gateway routing Inter-VPC communication not working\nCheck Transit Gateway route table associations Verify security group rules allow traffic Check Network ACLs Monitoring and Logging 10.1 Enable VPC Flow Logs For each VPC:\naws ec2 create-flow-logs \\ --resource-type VPC \\ --resource-ids vpc-xxxxxxxxx \\ --traffic-type ALL \\ --log-destination-type cloud-watch-logs \\ --log-group-name /aws/vpc/flowlogs \\ --deliver-logs-permission-arn arn:aws:iam::account:role/flowlogsRole 10.2 CloudWatch Metrics Monitor important metrics:\nNetworkIn/NetworkOut: Data transfer NetworkPacketsIn/NetworkPacketsOut: Packet counts CPUUtilization: Instance performance "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.8-create-vpc-endpoints/",
	"title": "Create VPC Endpoints",
	"tags": [],
	"description": "",
	"content": "Step 8: Create VPC Endpoints 8.1 S3 Gateway Endpoint In the VPC Console, select Endpoints Click Create Endpoint 3. Configure as follows:\nName tag: Hub-S3-Endpoint\rService category: AWS services\rService Name: com.amazonaws.ap-southeast-1.s3 (Type: Gateway)\rVPC: Hub-VPC\rRoute tables: Select the private route tables (Hub-Private-RT-1a, Hub-Private-RT-1b)\rPolicy: Full access 4. Click Create Endpoint\n8.2.1 Create Security Group for VPC Endpoints Before creating Interface Endpoints, you need to create a Security Group to control traffic to them.\nIn the VPC Console, select Security Groups. Click Create security group. Configure as follows: Parameter Value Security group name Hub-VPCEndpoint-SG Description Security group for VPC Endpoints in Hub VPC VPC Hub-VPC Inbound rules Type: HTTPS (Port 443), Source: 10.0.0.0/16 (Hub-VPC CIDR) Outbound rules Type: All Traffic, Destination: 0.0.0.0/0 Click Create security group. 8.2 EC2 Interface Endpoint Name tag: Hub-EC2-Endpoint\rService category: AWS services\rService Name: com.amazonaws.ap-southeast-1.ec2 (Type: Interface)\rVPC: Hub-VPC\rSubnets: Hub-Private-Subnet-1a, Hub-Private-Subnet-1b\rSecurity groups: Hub-VPCEndpoint-SG\rPolicy: Full access\r**Note:** Uncheck \u0026#34;Enable Private DNS Name\u0026#34; (if this option is available). 8.3 SSM Interface Endpoints Create endpoints for Systems Manager:\nEndpoints to create:\r- com.amazonaws.ap-southeast-1.ssm\r- com.amazonaws.ap-southeast-1.ssmmessages\r- com.amazonaws.ap-southeast-1.ec2messages "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.8-security-best-practices/",
	"title": "Implementing Security Best Practices",
	"tags": [],
	"description": "",
	"content": "Adhering to best practices is crucial for maintaining a secure environment.\n8.1 Principle of Least Privilege This principle requires that only the minimum necessary permissions are granted to perform a function. We apply this by regularly reviewing and tightening the rules in our Security Groups.\nReview and Tighten Security Groups Use the AWS CLI to check for overly permissive security group rules, especially those that allow access from anywhere (0.0.0.0/0).\n# Script to check for overly permissive security group rules aws ec2 describe-security-groups \\ --query \u0026#39;SecurityGroups[?IpPermissions[?IpRanges[?CidrIp==`0.0.0.0/0`]]].[GroupId,GroupName]\u0026#39; \\ --output table "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.8-next-steps/",
	"title": "Next Steps",
	"tags": [],
	"description": "",
	"content": "Next Steps After completing testing and monitoring, the next steps focus on cleaning up unused resources to keep the environment organized and avoid unnecessary costs. This includes reviewing temporary resources, removing test configurations, and ensuring that only essential components remain in your network architecture.\n"
},
{
	"uri": "http://localhost:1313/4-spoke-vpcs/4.9-next-steps/",
	"title": "Next Steps",
	"tags": [],
	"description": "",
	"content": "Next Steps In the next chapter, we will:\nConfigure advanced routing policies Implement security best practices Set up monitoring and alerting Optimize performance Spoke VPCs are now connected and can communicate with the Hub VPC and the internet!\nReferences VPC User Guide Transit Gateway User Guide Security Groups User Guide "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.9-disaster-recovery/",
	"title": "Disaster Recovery and Business Continuity",
	"tags": [],
	"description": "",
	"content": "Planning for resilience is an integral part of a robust architecture.\n9.1 Verify Multi-AZ Deployment Ensure that critical resources are deployed across multiple Availability Zones to increase high availability.\n# Verify that subnets are deployed across multiple AZs aws ec2 describe-subnets \\ --filters \u0026#34;Name=vpc-id,Values=vpc-xxxxxxxxx\u0026#34; \\ --query \u0026#39;Subnets[*].[SubnetId,AvailabilityZone,CidrBlock]\u0026#39; \\ --output table 9.2 Backup and Recovery Procedures Regularly back up your network configuration to be able to quickly recover in case of an incident.\nBackup Transit Gateway Configuration Export the Transit Gateway configuration and its route tables to JSON files.\n# Export Transit Gateway configuration aws ec2 describe-transit-gateways \\ --transit-gateway-ids tgw-xxxxxxxxx \u0026gt; tgw-backup.json # Export Transit Gateway route tables aws ec2 describe-transit-gateway-route-tables \\ --filters \u0026#34;Name=transit-gateway-id,Values=tgw-xxxxxxxxx\u0026#34; \u0026gt; tgw-routes-backup.json "
},
{
	"uri": "http://localhost:1313/6-testing-monitoring/6.9-references/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": "References This section provides useful references for you to delve deeper into the services and concepts covered in this chapter, especially regarding CloudWatch, VPC Flow Logs, and AWS X-Ray. These are official resources from AWS, ensuring accuracy and up-to-dateness.\nCloudWatch User Guide VPC Flow Logs AWS X-Ray "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.9-security-groups/",
	"title": "Security Groups",
	"tags": [],
	"description": "",
	"content": "Step 9: Security Groups 9.1 Hub Default Security Group Select Security Groups Click Create Security Group 3. Configure as follows:\nName: Hub-Default-SG\rDescription: Default security group for Hub VPC\rVPC: Hub-VPC\rInbound Rules:\r- Type: All Traffic\rSource: 10.0.0.0/16 (Private networks)\rOutbound Rules:\r- Type: All Traffic\rDestination: 0.0.0.0/0 "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.10-create-bastion-host/",
	"title": "Create Bastion Host (Optional)",
	"tags": [],
	"description": "",
	"content": "Step 10: Create Bastion Host (Optional) 10.1 Launch EC2 Instance In the EC2 Console, click Launch Instance 2. Configure as follows:\nName: Hub-Bastion-Host\rAMI: Amazon Linux 2023\rInstance type: t3.micro\rKey pair: Create new or use existing\rNetwork settings:\r- VPC: Hub-VPC\r- Subnet: Hub-Public-Subnet-1a\r- Auto-assign public IP: Enable\r- Security group: Create new 10.2 Create and Attach IAM Role for Bastion Host To allow the Bastion Host to access AWS services (like S3, EC2) without manual credential configuration, you need to create and attach an IAM Role to it.\nCreate IAM Role: Open the AWS Console and navigate to the IAM service. In the left navigation pane, select Roles. Click the Create role button. Select AWS service as the trusted entity type, then choose EC2 as the use case. Click Next. In the Add permissions section, search for and select the following policies: AmazonS3ReadOnlyAccess AmazonEC2ReadOnlyAccess AmazonSSMReadOnlyAccess CloudWatchLogsReadOnlyAccess AWSVPCReadOnlyAccess Click Next. Give the Role a name, for example: BastionHostAccessRole. Click Create role. Attach IAM Role to Bastion Host: Open the AWS Console and navigate to the EC2 service. In the left navigation pane, select Instances. Find and select your EC2 instance named Hub-Bastion-Host. Click Actions -\u0026gt; Security -\u0026gt; Modify IAM role. * In the IAM role dropdown list, select the BastionHostAccessRole you just created. * Click Update IAM role.\n10.3 Bastion Security Group Name: Hub-Bastion-SG\rDescription: Security group for bastion host\rInbound Rules:\r- Type: SSH (22)\rSource: Your IP address\rOutbound Rules:\r- Type: All Traffic\rDestination: 0.0.0.0/0 "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.10-security-configuration-testing/",
	"title": "Security Configuration Testing",
	"tags": [],
	"description": "",
	"content": "After deploying security measures, testing is crucial to verify that your controls work as expected and no vulnerabilities are left unaddressed. This section will guide you on performing connectivity tests and security validation.\n10.1 Connectivity Testing Use tools like nc (Netcat) from the Bastion Host to check if allowed connections succeed and forbidden connections are actually blocked. This helps confirm that Security Groups and Network ACLs are functioning correctly.\nNote on IP addresses:\n10.1.1.10 and 10.2.1.10 are placeholders. You need to replace them with the private IP addresses of your instances in the Production and Development VPCs. You can find these IP addresses in the AWS Management Console, under the EC2 service, select Instances, then select the desired instance and look in the Details (or Description) section. Explanation of connectivity test results:\nPort 22 (SSH): Should typically succeed when tested from the Bastion Host to internal instances. This is expected as the Bastion Host is designed to be a secure administrative access point. Port 80 (HTTP) / 443 (HTTPS): If you test to a Web Tier instance, it might succeed if the instance\u0026rsquo;s Security Group allows access from the Bastion Host (less common) or if you are testing to a Load Balancer. However, if it times out when testing directly to a Web Tier instance from the Bastion Host, this is often correct and expected. It indicates that the instance\u0026rsquo;s Security Group only allows access from the Load Balancer, ensuring traffic flows through the designed path. Port 3389 (RDP) / 1433 (SQL Server): These ports should typically time out when tested from the Bastion Host to Production instances (unless specific configurations allow very limited administrative access). Their timeout is a sign of good security configuration, indicating that these sensitive ports are protected from unauthorized access, enforcing the principle of least privilege. Test Allowed Connections # From the bastion host, test connectivity to each environment ssh -i key.pem ec2-user@bastion-host Test Production connectivity After deployment, testing is crucial to verify that your security controls work as expected.\n10.1 Connectivity Testing Use tools like nc (Netcat) from the Bastion Host to check if allowed connections succeed and forbidden connections are actually blocked.\nTest Allowed Connections # From the bastion host, test SSH connection to a production instance nc -zv 10.1.1.10 22 # Should succeed Test Blocked Connections # Test RDP connection to a production instance nc -zv 10.1.1.10 3389 # Should be blocked (timeout) # Test connection from production to development nc -zv 10.2.1.10 22 # Should fail if isolated 10.2 Security Validation Use a checklist to perform basic penetration testing and validate security policies.\nChecklist Verify that security group rules are restrictive. Check if NACLs block unauthorized traffic. Confirm cross-environment isolation. Validate that only authorized ports are open. Check if internet access is properly controlled. "
},
{
	"uri": "http://localhost:1313/5-routing-security/5.11-additional-considerations/",
	"title": "Additional Considerations",
	"tags": [],
	"description": "",
	"content": "This section covers other important topics related to managing and operating your network architecture.\nCost Impact Security and Network-Related Costs AWS Transit Gateway: Costs are based on the number of attachments and the amount of data processed. VPC Flow Logs \u0026amp; CloudWatch: Costs are incurred per GB of data ingested and stored. NAT Gateway: Billed per hour and per GB of data processed. Data Transfer: Costs may apply for data transferred between Availability Zones. Cost Optimization Estimate Costs: Use the AWS Pricing Calculator. Optimize Logging: Filter flow logs and set retention policies. Commit to Usage: Use Savings Plans or Reserved Instances. Monitor Costs: Use AWS Cost Explorer and AWS Budgets. Automation with Infrastructure as Code (IaC) In practice, use tools like AWS CloudFormation or Terraform to automate deployment, ensure consistency, and minimize errors.\nTroubleshooting Common Security Issues Cannot connect between VPCs: Check TGW route tables, Security Groups, and NACLs. Internet access is not working: Check the default route, NAT Gateway, and Security Group outbound rules. Flow logs are not appearing: Check IAM permissions and log group configurations. Next Steps In the next chapter, we will:\nImplement comprehensive testing procedures. Set up monitoring dashboards. Perform performance optimizations. Create operational runbooks. References VPC Security Best Practices Transit Gateway Security VPC Flow Logs "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.11-testing-hub-vpc/",
	"title": "Testing Hub VPC",
	"tags": [],
	"description": "",
	"content": "Step 11: Testing Hub VPC 11.1 Test Internet Connectivity SSH into the bastion host Test internet connectivity: ping google.com curl -I https://aws.amazon.com 11.2 Test VPC Endpoints After attaching the IAM Role to the Bastion Host, the aws CLI commands will automatically use the credentials from that Role.\n# Test S3 endpoint aws s3 ls --region ap-southeast-1 # Test EC2 endpoint aws ec2 describe-instances --region ap-southeast-1 11.3 Test DNS Resolution nslookup s3.ap-southeast-1.amazonaws.com nslookup ec2.ap-southeast-1.amazonaws.com "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.12-cost-optimization/",
	"title": "Cost Optimization",
	"tags": [],
	"description": "",
	"content": "Cost Optimization Current Costs NAT Gateway: $45/month √ó 2 = $90/month VPC Endpoints: ~$7.20/month per endpoint Elastic IPs: $3.65/month √ó 2 = $7.30/month Optimization Tips Consolidate NAT Gateways if HA is not required Use VPC Endpoints to reduce NAT Gateway traffic Monitor data transfer via CloudWatch "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.13-troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Troubleshooting Common Issues Cannot reach internet from private subnets\nCheck NAT Gateway status Verify route table configuration Check security group rules VPC Endpoints not working\nVerify endpoint policy Check security group rules Ensure DNS resolution is enabled Transit Gateway attachment failed\nCheck subnet selection Verify Transit Gateway status Check IAM permissions "
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.14-next-steps/",
	"title": "Next Steps",
	"tags": [],
	"description": "",
	"content": "Next Steps In the next chapter, we will:\nCreate Production and Development VPCs Attach them to the Transit Gateway Configure routing between Hub and Spoke VPCs The Hub VPC is now ready to provide shared services for the entire architecture!\n"
},
{
	"uri": "http://localhost:1313/3-hub-vpc/3.15-references/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": "References VPC User Guide NAT Gateway User Guide VPC Endpoints User Guide "
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]